package dao;

import database.DatabaseManager;
import model.BacIntelligent;
import model.TypePoubelle;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class BacIntelligentDAO {

    // üîÅ M√©thode 1 : Enregistrer un bac dans la base
    public void enregistrerBac(BacIntelligent bac) {
        String sql = "INSERT INTO BacIntelligent " +
                     "(Id_BacIntelligent, capaciteMax, emplacement, estPleine, Id_CentreDeTri, Id_TypePoubelle) " +
                     "VALUES (?, ?, ?, ?, ?, ?)";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, bac.getId());
            stmt.setDouble(2, bac.getCapaciteMax());
            stmt.setString(3, bac.getEmplacement());
            stmt.setBoolean(4, bac.isEstPleine());
            stmt.setInt(5, bac.getIdCentreDeTri());
            stmt.setInt(6, bac.getIdTypePoubelle());

            stmt.executeUpdate();
            System.out.println("‚úÖ Bac intelligent enregistr√© avec succ√®s !");
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur lors de l'enregistrement du bac : " + e.getMessage());
        }
    }

    // üîÅ M√©thode 2 : R√©cup√©rer tous les bacs depuis la base
    public List<BacIntelligent> getAllBacs() {
        List<BacIntelligent> bacs = new ArrayList<>();
        String sql = "SELECT * FROM BacIntelligent";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                int id = rs.getInt("Id_BacIntelligent");
                int idTypePoubelle = rs.getInt("Id_TypePoubelle");
                double capacite = rs.getDouble("capaciteMax");
                String emplacement = rs.getString("emplacement");

                // ‚úÖ Conversion propre de l'entier en TypePoubelle
                TypePoubelle type = TypePoubelle.fromId(idTypePoubelle);

                BacIntelligent bac = new BacIntelligent(id, type, capacite, emplacement);
                bac.setIdCentreDeTri(rs.getInt("Id_CentreDeTri"));
                bac.setEstPleine(rs.getBoolean("estPleine"));

                bacs.add(bac);
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Erreur lors de la r√©cup√©ration des bacs : " + e.getMessage());
        }

        return bacs;
    }

    // üîÅ M√©thode 3 : Mettre √† jour les propri√©t√©s d‚Äôun bac (ex : plein, capacit√©)
    public void mettreAJourEtat(BacIntelligent bac) {
        String sql = "UPDATE BacIntelligent SET estPleine = ?, capaciteMax = ? WHERE Id_BacIntelligent = ?";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setBoolean(1, bac.isEstPleine());
            stmt.setDouble(2, bac.getCapaciteMax());
            stmt.setInt(3, bac.getId());

            stmt.executeUpdate();
            System.out.println("‚úÖ √âtat du bac mis √† jour.");
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur lors de la mise √† jour du bac : " + e.getMessage());
        }
    }

    // üóë M√©thode 4 : Supprimer un bac
    public void supprimerBac(int id) {
        String sql = "DELETE FROM BacIntelligent WHERE Id_BacIntelligent = ?";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, id);
            stmt.executeUpdate();
            System.out.println("‚úÖ Bac supprim√© avec succ√®s.");
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur lors de la suppression du bac : " + e.getMessage());
        }
    }
}
